rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isMember(conversationData) {
      return request.auth.uid in conversationData.members;
    }
    
    // Users collection
    match /users/{userId} {
      // Anyone authenticated can read user profiles
      allow read: if isAuthenticated();
      
      // Users can only create/update their own profile with strict invariants:
      // - Document ID must equal auth.uid
      // - email must equal auth.token.email
      // - email/emailLower are immutable after creation (validated without lower())
      // - email/emailLower are immutable after creation
      allow create: if isAuthenticated() && isOwner(userId)
        && request.resource.id == request.auth.uid
        && request.resource.data.email == request.auth.token.email;
      
      // Updates allowed only by owner; email and emailLower must remain unchanged
      // Note: presence (online/offline) is tracked in Realtime Database, not Firestore
      allow update: if isAuthenticated() && isOwner(userId)
        && request.resource.id == request.auth.uid
        && request.resource.data.email == resource.data.email
        && request.resource.data.emailLower == resource.data.emailLower
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['displayName','photoURL']);
      
      // Users cannot delete their own profile (admin only)
      allow delete: if false;
      
      // Contacts subcollection
      match /contacts/{contactUid} {
        // Users can read their own contacts
        allow read: if isAuthenticated() && isOwner(userId);
        
        // Users can add contacts to their own list
        allow create: if isAuthenticated() && isOwner(userId)
          && request.resource.data.contactUid == contactUid;
        
        // Users can remove contacts from their own list
        allow delete: if isAuthenticated() && isOwner(userId);
        
        // Contacts cannot be updated (only add/remove)
        allow update: if false;
      }
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      // Users can read conversations they're members of
      allow read: if isAuthenticated() && isMember(resource.data);
      
      // Users can create conversations if they include themselves in members
      // For DMs, allow writing dmKey and clearedAt map
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.members
        && request.resource.data.diff({}).changedKeys().hasOnly([
          'members','type','dmKey','updatedAt','groupName','clearedAt','lastMessage','lastReadAt'
        ]);
      
      // Only members can update conversation
      // Restrict updates to expected fields
      allow update: if isAuthenticated() && isMember(resource.data)
        && request.resource.data.diff(resource.data).changedKeys().hasOnly([
          'lastMessage','updatedAt','groupName','members','clearedAt','lastReadAt'
        ]);
      
      // Members can delete conversations
      allow delete: if isAuthenticated() && isMember(resource.data);
      
      // Participants subcollection (for read receipts in group chats)
      match /participants/{participantId} {
        // Users can read participants in conversations they're members of
        allow read: if isAuthenticated() && isMember(get(/databases/$(database)/documents/conversations/$(conversationId)).data);
        
        // Users can only update their own participant document
        allow create, update: if isAuthenticated() 
          && isMember(get(/databases/$(database)/documents/conversations/$(conversationId)).data)
          && participantId == request.auth.uid
          && request.resource.data.userId == request.auth.uid;
        
        // Users cannot delete participant documents
        allow delete: if false;
      }
      
      // Members subcollection (Phase 1 - Meeting Scheduler)
      // Stores member roles for scheduling
      match /members/{memberId} {
        // Users can read members in conversations they're part of
        allow read: if isAuthenticated() && isMember(get(/databases/$(database)/documents/conversations/$(conversationId)).data);
        
        // Users can create/update member documents
        // Only conversation members can modify roles
        allow create, update: if isAuthenticated() 
          && isMember(get(/databases/$(database)/documents/conversations/$(conversationId)).data);
        
        // Members cannot be deleted (only conversation deletion removes them)
        allow delete: if false;
      }
      
      // Messages subcollection
      match /messages/{messageId} {
        // Members of the conversation can read messages
        allow read: if isAuthenticated() && isMember(get(/databases/$(database)/documents/conversations/$(conversationId)).data);
        
        // Members can create messages
        allow create: if isAuthenticated() 
          && isMember(get(/databases/$(database)/documents/conversations/$(conversationId)).data)
          && request.resource.data.senderId == request.auth.uid;
        
        // Sender can update their own messages, OR
        // Any other member can update ONLY the 'status' field
        allow update: if isAuthenticated()
          && isMember(get(/databases/$(database)/documents/conversations/$(conversationId)).data)
          && (
            // Sender can update anything on their own message
            request.resource.data.senderId == request.auth.uid
            || (
              // Non-senders: only 'status' may change
              request.auth.uid != resource.data.senderId
              && resource.data.diff(request.resource.data).changedKeys().hasOnly(['status'])
            )
          );
        
        // Sender can delete their own messages
        allow delete: if isAuthenticated() && resource.data.senderId == request.auth.uid;
      }
    }
    
    // Receipts collection (for read receipts)
    match /receipts/{receiptId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // ===================================================================
    // Casper AI Agent Collections (Phase 2)
    // ===================================================================
    
    // Agent Preferences - Users can read/write their own preferences
    match /assist/agents/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // User Tasks - Users can read/write their own tasks
    match /assist/tasks/{userId}/{taskId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // Daily Digests - Users can read their own digests
    // (Write restricted to Cloud Functions - implemented in PR3+)
    match /assist/digests/{userId}/{dateId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if false; // Will be written by Cloud Functions
    }
    
    // Conversation Insights (summaries, actions, decisions)
    // Users can read insights for conversations they're members of
    match /assist/insights/{conversationId}/{insightId} {
      allow read: if isAuthenticated() 
        && isMember(get(/databases/$(database)/documents/conversations/$(conversationId)).data);
      // Allow authenticated users to write insights (for now)
      // In production, this should be restricted to Cloud Functions
      allow write: if isAuthenticated()
        && isMember(get(/databases/$(database)/documents/conversations/$(conversationId)).data);
    }
    
    // Semantic Chunks for RAG (Phase 3+)
    // Users can read chunks for conversations they're members of
    match /semantic_chunks/{chunkId} {
      allow read: if isAuthenticated() 
        && isMember(get(/databases/$(database)/documents/conversations/$(resource.data.cid)).data);
      // Write restricted to Cloud Functions only
      allow write: if false;
    }
    
    // Multi-Step Agent Plans (PR 7)
    // Users can read/write their own plans
    match /agent/{userId}/plans/{planId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // Schedules Collection (Phase 1 - Meeting Scheduler)
    // Users can read/write their own schedule events
    match /schedules/{userId}/events/{eventId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // Default: deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}





